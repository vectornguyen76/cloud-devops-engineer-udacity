version: 2.1
# Use a package of configuration called an orb.
orbs:
  aws-cli: circleci/aws-cli@2.0.3
  python: circleci/python@2.1.1
commands:
  # Reusable Job Code
  export-env:
    steps: 
      - run:
          name: "Get git commit short-hash for the current and the previous commit"
          command: |
            # Git hash for the current commit
            echo 'export current_commit=<< pipeline.git.revision >>' >> "$BASH_ENV"
            echo 'export CUR_SHORT_HASH="${current_commit:0:7}"' >> "$BASH_ENV"
            # echo 'export CUR_SHORT_HASH="TEST"' >> "$BASH_ENV"
      - run:
          name: "Export environment variable"
          command: |
            echo 'export WORKSPACE_DIR="/home/circleci/workspace"' >> "$BASH_ENV"
            echo 'export PROJECT_ROOT_DIR="c3-build-cicd-pipeline"' >> "$BASH_ENV"
            echo 'export TEMPLATE_ROOT_DIR=".circleci/files"' >> "$BASH_ENV"
            echo 'export PROJECT_TAG="udacity-cicd-project"' >> "$BASH_ENV"

  revert-migrations:
    description: "Revert last migrations"
    parameters:
      migrations-key:
        type: string
        default: ""
    steps:
      - run:
          name: "Revert migrations if fail"
          when: "on_fail"
          command: |
            SUCCESS=$(curl --insecure https://kvdb.io/$KVDB_BUCKET_ID/migration_$CUR_SHORT_HASH)

            if [[ -z $SUCCESS ]]
            then
              echo "No migration to revert"
              exit 0
            fi

            cd $(eval echo "$CIRCLE_WORKING_DIRECTORY/$PROJECT_ROOT_DIR/backend")
            # Install dependencies
            npm install
            # Revert migration on fail
            npm run migrations:revert

  deploy-stack:
    parameters:
      stack_name:
        type: string
      template_file:
        type: string
      parameter_overrides:
        type: string
    steps:
      - run:
          name: "Deploy << parameters.stack_name >> stack"
          command: |
            aws cloudformation deploy \
            --stack-name << parameters.stack_name >> \
            --template-file << parameters.template_file >> \
            --parameter-overrides << parameters.parameter_overrides >> \
            --no-fail-on-empty-changeset \
            --region us-east-1 \
            --tags Project="udacity-project" \
            --capabilities "CAPABILITY_IAM" "CAPABILITY_NAMED_IAM"
  destroy-environment:
    parameters:
      stack_name:
        type: string
      bucket_name:
        type: string
        default: ""
      when:
        default: "on_fail"
        type: enum
        enum: ["always", "on_success", "on_fail"]
    steps:
      - run:
          name: "Empty << parameters.bucket_name >> bucket"
          when: << parameters.when >>
          shell: /bin/bash
          command: |
            bucket_name="<< parameters.bucket_name >>"

            if [[ -z $bucket_name ]]
            then
              echo "Skip the empty bucket action due to the empty bucket name"
              exit 0
            fi

            bucket_uri="s3://$bucket_name"
            bucket_info=$(aws s3 ls $bucket_uri 2>&1)

            if echo $bucket_info | grep 'NoSuchBucket' > /dev/null
            then
              echo "Bucket doesn't exist, skip the empty bucket action"
              exit 0
            fi

            # Empty before delete the bucket
            aws s3 rm $bucket_uri --recursive
      - run:
          name: "Delete << parameters.stack_name >> stack"
          when: << parameters.when >>
          shell: /bin/bash
          command: |
            # Get stack id for the delete_stack waiter
            stack_info=$(aws cloudformation describe-stacks --stack-name << parameters.stack_name >> --query "Stacks[*] | [0].StackId" 2>&1)
            if echo $stack_info | grep 'does not exist' > /dev/null
            then
              echo "Stack does not exist."
              echo $stack_info
              exit 0
            fi
            if echo $stack_info | grep 'ValidationError' > /dev/null
            then
              echo $stack_info
              exit 1
            else
              aws cloudformation delete-stack --stack-name << parameters.stack_name >>
              echo $stack_info
              aws cloudformation wait stack-delete-complete --stack-name << parameters.stack_name >>
              if [ "<< parameters.when >>" = "on_fail" ]
              then
                echo "Roll back completed. Green environment destroyed."
                exit 0
              fi
              echo "Stack << parameters.stack_name >> cleaned up"
              exit 0
            fi
  
# Define the jobs we want to run for this project
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      # This command will pull all of the files into a directory called project which can be found at ~/project.
      - checkout
      # Export environment variable
      - export-env
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd $(eval echo "$CIRCLE_WORKING_DIRECTORY/$PROJECT_ROOT_DIR/frontend")
            npm install
            npm run build
      - save_cache:
          paths: [/home/circleci/project/c3-build-cicd-pipeline/frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      # This command will pull all of the files into a directory called project which can be found at ~/project.
      - checkout
      # Export environment variable
      - export-env
      - restore_cache:
          keys: [backend-build]
      - run: 
          name: Save all db varibles in env file 
          command: |
            cd $(eval echo "$CIRCLE_WORKING_DIRECTORY/$PROJECT_ROOT_DIR/backend")
            touch .env
            echo NODE_ENV=production >> .env
            echo TYPEORM_HOST=$TYPEORM_HOST >> .env
            echo TYPEORM_CONNECTION=$TYPEORM_CONNECTION >> .env
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> .env
            echo TYPEORM_ENTITIES=$TYPEORM_ENTITIES >> .env
            echo TYPEORM_MIGRATIONS=$TYPEORM_MIGRATIONS >> .env
            echo TYPEORM_MIGRATIONS_DIR=$TYPEORM_MIGRATIONS_DIR >> .env
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> .env
            echo TYPEORM_PORT=$TYPEORM_PORT >> .env
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> .env
      - run:
          name: Back-end build
          command: |
            cd $(eval echo "$CIRCLE_WORKING_DIRECTORY/$PROJECT_ROOT_DIR/backend")
            npm install
            npm run build
            cd ..
            # Compress the backend folder
            tar -C backend -czvf artifact-backend.tar.gz .
            # no error if existing, make parent directories as needed
            mkdir --parents $WORKSPACE_DIR
            # Move the compressed file to workspace folder
            mv artifact-backend.tar.gz $WORKSPACE_DIR/artifact-backend.tar.gz
      - persist_to_workspace:
          root: /home/circleci/workspace
          paths:
            - "artifact-backend.tar.gz"
      - save_cache:
          paths: [/home/circleci/project/c3-build-cicd-pipeline/backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      # This command will pull all of the files into a directory called project which can be found at ~/project.
      - checkout
      # Export environment variable
      - export-env
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Test frontend
          command: |
            cd $(eval echo "$CIRCLE_WORKING_DIRECTORY/$PROJECT_ROOT_DIR/frontend")
            npm install
            npm run test
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      # This command will pull all of the files into a directory called project which can be found at ~/project.
      - checkout
      # Export environment variable
      - export-env
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Test backend
          command: |
            cd $(eval echo "$CIRCLE_WORKING_DIRECTORY/$PROJECT_ROOT_DIR/backend")
            npm install
            npm run test
            
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      # This command will pull all of the files into a directory called project which can be found at ~/project.
      - checkout
      # Export environment variable
      - export-env
      # Checkout code from git
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Scan frontend dependencies
          command: |
            cd $(eval echo "$CIRCLE_WORKING_DIRECTORY/$PROJECT_ROOT_DIR/frontend")
            npm install
            ## npm install oauth-sign@^0.9.0
            npm audit fix --audit-level=critical --force
            ## If the "npm audit fix" command above could not fix all critical vulnerabilities, try “npm audit fix --force” again
            npm audit fix --force
            npm audit --audit-level=critical

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      # This command will pull all of the files into a directory called project which can be found at ~/project.
      - checkout
      # Export environment variable
      - export-env
      # Restore from cache
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Scan backend dependencies
          command: |
            cd $(eval echo "$CIRCLE_WORKING_DIRECTORY/$PROJECT_ROOT_DIR/backend")
            npm install
            ## npm install oauth-sign@^0.9.0
            npm audit fix --audit-level=critical --force
            ## If the "npm audit fix" command above could not fix all critical vulnerabilities, try “npm audit fix --force” again
            npm audit fix --force
            npm audit --audit-level=critical

  deploy-frontend-infrastructure:
    executor: aws-cli/default
    steps:
      # This command will pull all of the files into a directory called project which can be found at ~/project.
      - checkout
      # Export environment variable
      - export-env
      # Set up AWS Credentials
      - aws-cli/setup
      # Create frontend server
      - deploy-stack:
          stack_name: Udapeople-Frontend-${CUR_SHORT_HASH}
          template_file: $CIRCLE_WORKING_DIRECTORY/$TEMPLATE_ROOT_DIR/frontend.yml
          parameter_overrides: BucketName=udapeople-frontend-$CUR_SHORT_HASH
      - run:
          name: "Fetch and save the static host of the current bucket"
          command: |
            # no error if existing, make parent directories as needed
            mkdir --parents $WORKSPACE_DIR
            touch $WORKSPACE_DIR/websiteurl
            static_export_name=Udapeople-Frontend-$CUR_SHORT_HASH-WebsiteURL
            host=$(aws cloudformation list-exports \
            --query "Exports[?Name==\`$static_export_name\`].Value" \
            --no-paginate --output text)
            # Remove prefix ending in "//"
            static_host=${host#*//}
            echo $static_host > $WORKSPACE_DIR/websiteurl
            echo debug
            cat $WORKSPACE_DIR/websiteurl
      - persist_to_workspace:
          root: /home/circleci/workspace
          paths: 
            - websiteurl
      # Rollback if fail
      - destroy-environment:
          stack_name: Udapeople-Frontend-$CUR_SHORT_HASH

  deploy-backend-infrastructure:
    executor: aws-cli/default
    steps:
      # This command will pull all of the files into a directory called project which can be found at ~/project.
      - checkout
      # Export environment variable
      - export-env
      # Set up AWS Credentials
      - aws-cli/setup
      # Create backend infrastructure
      - deploy-stack:
          stack_name: Udapeople-Backend-$CUR_SHORT_HASH
          template_file: $CIRCLE_WORKING_DIRECTORY/$TEMPLATE_ROOT_DIR/backend.yml
          parameter_overrides: file://$CIRCLE_WORKING_DIRECTORY/$TEMPLATE_ROOT_DIR/backend-parameters.json
      - run:
          name: "Get backend URL"
          command: |
            # no error if existing, make parent directories as needed
            mkdir --parents $WORKSPACE_DIR
            # Create file
            touch $WORKSPACE_DIR/backendpublicdns
            backend_public_dns=Udapeople-Backend-$CUR_SHORT_HASH-PublicDNS
            # Pull the export value
            host=$(aws cloudformation list-exports \
            --query "Exports[?Name==\`$backend_public_dns\`].Value" \
            --no-paginate --output text)
            # Append the DNS to the inventory file
            echo $host >> $(eval echo "$CIRCLE_WORKING_DIRECTORY/.circleci/ansible/inventory.txt")
            # Move to workspace
            mv $(eval echo "$CIRCLE_WORKING_DIRECTORY/.circleci/ansible/inventory.txt $WORKSPACE_DIR/inventory.txt")
            # Setup API_URL for frontend to use
            API_URL="http://${host}:3030"
            echo "${API_URL}"
            # Store in workspace
            echo $API_URL > $WORKSPACE_DIR/backendpublicdns
      - persist_to_workspace:
          root: /home/circleci/workspace
          paths:
            - "inventory.txt"
            - "backendpublicdns"
      # Rollback if fail
      - destroy-environment:
          stack_name: Udapeople-Backend-$CUR_SHORT_HASH    

  configure-infrastructure: 
    executor:
      name: python/default
      tag: "3.11.2"
    steps:
      # This command will pull all of the files into a directory called project which can be found at ~/project.
      - checkout
      # Export environment variable
      - export-env
      # Set up AWS Credentials
      - aws-cli/setup
      - add_ssh_keys:
          fingerprints: ["61:22:79:6b:8b:79:4e:87:e1:ae:71:57:02:9d:1a:f2"]
      - python/install-packages:
          args: ansible
      - attach_workspace:
          at: /home/circleci/workspace
      - run:
          name: Run Playbook and Configure server
          command: |
            ansible-playbook -i $WORKSPACE_DIR/inventory.txt $(eval echo "$CIRCLE_WORKING_DIRECTORY/.circleci/ansible/configure-server.yml")
      # Rollback if fail
      - destroy-environment:
          stack_name: Udapeople-Frontend-$CUR_SHORT_HASH
          bucket_name: udapeople-frontend-$CUR_SHORT_HASH
      - destroy-environment:
          stack_name: Udapeople-Backend-$CUR_SHORT_HASH

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      # This command will pull all of the files into a directory called project which can be found at ~/project.
      - checkout
      # Export environment variable
      - export-env
      # Set up AWS Credentials
      - aws-cli/setup
      - run:
          name: Run migrations
          command: |
            cd $(eval echo "$CIRCLE_WORKING_DIRECTORY/$PROJECT_ROOT_DIR/backend")
            # Install dependencies
            npm install
            # Run and save the migration output
            npm run migrations > migrations_dump.txt
            # Cat file
            cat migrations_dump.txt
      - run:
          name: Send migration status to kvdb.io
          command: |
            cd $(eval echo "$CIRCLE_WORKING_DIRECTORY/$PROJECT_ROOT_DIR/backend")

            if cat migrations_dump.txt | grep "has been executed successfully."
            then
              curl --insecure https://kvdb.io/$KVDB_BUCKET_ID/migration_$CUR_SHORT_HASH  -d '1'
            fi
      # Rollback if fail
      - revert-migrations:
          migrations-key: migration_$CUR_SHORT_HASH
      - destroy-environment:
          stack_name: Udapeople-Frontend-$CUR_SHORT_HASH
      - destroy-environment:
          stack_name: Udapeople-Backend-$CUR_SHORT_HASH
    
  deploy-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      # This command will pull all of the files into a directory called project which can be found at ~/project.
      - checkout
      # Export environment variable
      - export-env
      # Set up AWS Credentials
      - aws-cli/setup
      - attach_workspace:
          at: /home/circleci/workspace
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: "Install AWS CLI"
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      - run:
          name: Deploy frontend objects
          command: |
            cd $(eval echo "$CIRCLE_WORKING_DIRECTORY/$PROJECT_ROOT_DIR/frontend")
            # Create .env file
            touch .env
            # Get backend URL
            API_URL=$(cat $WORKSPACE_DIR/backendpublicdns)
            echo API_URL="$API_URL" > .env
            # Install node modules
            npm install
            # Build project
            npm run build
            # Compress the build artifact and zip to dict folder
            tar -czvf "artifact-$CUR_SHORT_HASH.tar.gz" dist
            # Deploy frontend artifact (dict folder)
            aws s3 sync dist s3://udapeople-frontend-$CUR_SHORT_HASH --delete
      # Here's where you will add some code to rollback on failure
      # Rollback if fail
      - revert-migrations:
          migrations-key: migration_$CUR_SHORT_HASH
      - destroy-environment:
          stack_name: Udapeople-Frontend-$CUR_SHORT_HASH
          bucket_name: udapeople-frontend-$CUR_SHORT_HASH
      - destroy-environment:
          stack_name: Udapeople-Backend-$CUR_SHORT_HASH   
                    
  deploy-backend:
    executor: 
      name: python/default
      tag: "3.11.2"
    steps:
      # This command will pull all of the files into a directory called project which can be found at ~/project.
      - checkout
      # Export environment variable
      - export-env
      # Set up AWS Credentials
      - aws-cli/setup
      - add_ssh_keys:
          fingerprints: ["61:22:79:6b:8b:79:4e:87:e1:ae:71:57:02:9d:1a:f2"]
      - python/install-packages:
          args: ansible
      - attach_workspace:
          at: /home/circleci/workspace
      - run:
          name: Deploy backend
          command: |
            # Move the compressed file to ansible folder
            # no error if existing, make parent directories as needed
            mkdir --parents $(eval echo "$CIRCLE_WORKING_DIRECTORY/.circleci/ansible/roles/deploy/files")
            mv $WORKSPACE_DIR/artifact-backend.tar.gz $(eval echo "$CIRCLE_WORKING_DIRECTORY/.circleci/ansible/roles/deploy/files/artifact-backend.tar.gz")
      - run:
          name: "Ansible play book for deploy backend"
          command: |
            ansible-playbook -i $WORKSPACE_DIR/inventory.txt $(eval echo "$CIRCLE_WORKING_DIRECTORY/.circleci/ansible/deploy-backend.yml")
      # Rollback if fail
      - revert-migrations:
          migrations-key: migration_$CUR_SHORT_HASH
      - destroy-environment:
          stack_name: Udapeople-Frontend-$CUR_SHORT_HASH
          bucket_name: udapeople-frontend-$CUR_SHORT_HASH
      - destroy-environment:
          stack_name: Udapeople-Backend-$CUR_SHORT_HASH

  smoke-test:
    executor: aws-cli/default
    steps:
      # This command will pull all of the files into a directory called project which can be found at ~/project.
      - checkout
      # Export environment variable
      - export-env
      # Set up AWS Credentials
      - aws-cli/setup
      - attach_workspace:
          at: /home/circleci/workspace
      - run:
          name: Frontend smoke test.
          command: |
            static_host=$(cat $WORKSPACE_DIR/websiteurl)
            URL="http://$static_host/#/employees"
            echo ${URL}
            test_result=$(curl -s "$URL")
            if echo $test_result | grep "Welcome" > /dev/null
            then
              echo "Frontend test passed"
              echo $test_result
              exit 0
            else
              echo $test_result
              exit 1
            fi
      - run:
          name: "Backend smoke test"
          command: |
            API_URL=$(cat $WORKSPACE_DIR/backendpublicdns)
            echo $API_URL
            curl --version
            # When the backend server is not ready, let retry upto 30mins
            test_result=$(eval curl \
              --verbose --fail \
              --retry 360 --retry-max-time 1800 --retry-all-errors \
              --url "$API_URL/api/status")
            if echo $test_result | grep "ok" > /dev/null
            then
              echo "Backend test passed"
              echo $test_result
              exit 0
            else
              echo $test_result
              exit 1
            fi
      # Rollback if fail
      - revert-migrations:
          migrations-key: migration_$CUR_SHORT_HASH
      - destroy-environment:
          stack_name: Udapeople-Frontend-$CUR_SHORT_HASH
          bucket_name: udapeople-frontend-$CUR_SHORT_HASH
      - destroy-environment:
          stack_name: Udapeople-Backend-$CUR_SHORT_HASH 

  promote-to-production:
    executor: aws-cli/default
    steps:
      # This command will pull all of the files into a directory called project which can be found at ~/project.
      - checkout
      # Export environment variable
      - export-env
      # Set up AWS Credentials
      - aws-cli/setup
      - attach_workspace:
          at: /home/circleci/workspace
      - deploy-stack:
          stack_name: Udapeople-Cloudfront-$CUR_SHORT_HASH
          template_file: $CIRCLE_WORKING_DIRECTORY/$TEMPLATE_ROOT_DIR/cloudfront.yml
          parameter_overrides: S3StaticHostUrl="udapeople-frontend-$CUR_SHORT_HASH.s3.amazonaws.com"
      # Rollback if fail
      - revert-migrations:
          migrations-key: migration_$CUR_SHORT_HASH
      - destroy-environment:
          stack_name: Udapeople-Frontend-$CUR_SHORT_HASH
          bucket_name: udapeople-frontend-$CUR_SHORT_HASH
      - destroy-environment:
          stack_name: Udapeople-Backend-$CUR_SHORT_HASH 

  clean-up:
    executor: aws-cli/default
    steps:
      # This command will pull all of the files into a directory called project which can be found at ~/project.
      - checkout
      # Export environment variable
      - export-env
      # Set up AWS Credentials
      - aws-cli/setup
      - attach_workspace:
          at: /home/circleci/workspace
      - run:
          name: "Fetch stacks and save the old stack name"
          command: |
            # Fetch the stack names
            export STACKS=(
              $(aws cloudformation list-stacks \
                  --query "StackSummaries[*].StackName" \
                  --no-paginate --output text \
                  --stack-status-filter CREATE_COMPLETE UPDATE_COMPLETE
              )
            )
            for stack in ${STACKS[@]}
            do
              if [[ ! "$stack" =~ "$CUR_SHORT_HASH" ]]
              then
                if [[ "$stack" =~ "Frontend" ]]
                then
                  touch $WORKSPACE_DIR/destroyfrontendstack
                  echo $stack > $WORKSPACE_DIR/destroyfrontendstack
                  touch $WORKSPACE_DIR/destroybucketname
                  # Set stack name lowercase as a bucket name
                  bucket_name=$(eval echo $stack | tr '[:upper:]' '[:lower:]')
                  echo $bucket_name > $WORKSPACE_DIR/destroybucketname
                fi
                if [[ "$stack" =~ "Backend" ]]
                then
                  touch $WORKSPACE_DIR/destroybackendstack
                  echo $stack > $WORKSPACE_DIR/destroybackendstack
                fi
                if [[ "$stack" =~ "Cloudfront" ]]
                then
                  touch $WORKSPACE_DIR/destroycloudfrontstack
                  echo $stack > $WORKSPACE_DIR/destroycloudfrontstack
                fi
              fi
            done
      # Remove the cloudfront infrastructure
      - destroy-environment:
          stack_name: $(eval cat $WORKSPACE_DIR/destroycloudfrontstack)
          when: "always"
      # Remove the backend infrastructure
      - destroy-environment:
          stack_name: $(eval cat $WORKSPACE_DIR/destroybackendstack)
          when: "always"
      # Remove the frontend infrastructure
      - destroy-environment:
          stack_name: $(eval cat $WORKSPACE_DIR/destroyfrontendstack)
          bucket_name: $(eval cat $WORKSPACE_DIR/destroybucketname)
          when: "always"

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: 
            - build-frontend
      - test-backend:
          requires: 
            - build-backend
      - scan-backend:
          requires: 
            - build-backend
      - scan-frontend:
          requires: 
          - build-frontend
      - deploy-frontend-infrastructure:
          requires: 
            - test-frontend
            - scan-frontend
          filters:
            branches:
              only:
                - main
      - deploy-backend-infrastructure:
          requires: 
            - test-backend
            - scan-backend
          filters:
            branches:
              only:
                - main
      - configure-infrastructure:
          requires:
            - deploy-frontend-infrastructure
            - deploy-backend-infrastructure
      - run-migrations:
          requires:
            - configure-infrastructure
      - deploy-frontend:
          requires:
            - run-migrations
      - deploy-backend:
          requires:
            - run-migrations
      - smoke-test:
          requires:
            - deploy-backend
            - deploy-frontend
      - promote-to-production:
          requires:
            - smoke-test
      - clean-up:
          requires:
            - promote-to-production