version: 2.1
# Use a package of configuration called an orb.
orbs:
  aws-cli: circleci/aws-cli@2.0.3
  python: circleci/python@2.1.1
commands:
  # Exercise: Reusable Job Code
  print_pipeline_id:
    parameters:
      id: 
        type: string
    steps:
      - run: echo << parameters.id >>
  export_environment_variable:
    steps:
      - run:
          name: "Export environment variable"
          command: |
            echo 'export WORKSPACE_DIR="/home/circleci/workspace"' >> "$BASH_ENV"
            echo 'export PROJECT_ROOT_DIR="c3-build-cicd-pipeline/final-project"' >> "$BASH_ENV"
            echo 'export TEMPLATE_ROOT_DIR="c3-build-cicd-pipeline/final-project/infrastructure"' >> "$BASH_ENV"
            echo 'export PROJECT_TAG="VectorNguyen-cicd-project"' >> "$BASH_ENV"

  # Exercise - Rollback
  destroy_environment:
    steps:
      - run:
          name: Destroy environment
          # ${CIRCLE_WORKFLOW_ID} is a Built-in environment variable 
          # ${CIRCLE_WORKFLOW_ID:0:5} takes the first 5 chars of the variable CIRCLE_CI_WORKFLOW_ID 
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name myStack-${CIRCLE_WORKFLOW_ID:0:5}

  deploy_stack:
    parameters:
      stack_name:
        type: string
      template_file:
        type: string
      parameter_overrides:
        type: string
    steps:
      - run:
          name: "Deploy << parameters.stack_name >> stack"
          command: |
            aws cloudformation deploy \
            --stack-name << parameters.stack_name >> \
            --template-file << parameters.template_file >> \
            --parameter-overrides << parameters.parameter_overrides >> \
            --no-fail-on-empty-changeset \
            --region us-east-1 \
            --tags Project="VectorNguyen-cicd-project" \
            --capabilities "CAPABILITY_IAM" "CAPABILITY_NAMED_IAM"

# Define the jobs we want to run for this project
jobs:
  print_hello_world:
    docker:
      - image: circleci/node:13.8.0
    environment:
      MY_ENV: 123
    steps:
      - run: echo HELLO WORLD
      - print_pipeline_id:
          id: sample_id
      - print_pipeline_id:
          id: << pipeline.id >>
      - run: echo username $CIRCLE_USERNAME
      - run: "echo Test ENV: $MY_ENV"

  # Exercise: Sharing Files (Job names may have changed)
  upload_file:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - run: echo "THIS IS A SAMPLE TEXT" > ~/output.txt  
      - persist_to_workspace:
          root: ~/
          paths: 
            - output.txt  

  download_file:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - attach_workspace:
          at: ~/
      - run: cat ~/output.txt 

  # Exercise: Infrastructure Creation
  # Exercise - Rollback
  create_infrastructure: 
    executor: aws-cli/default
    steps:
      # This command will pull all of the files into a directory called project which can be found at ~/project.
      - checkout
      # Export environment variable
      - export_environment_variable
      # Set up AWS Credentials
      - aws-cli/setup

      - run: echo $CIRCLE_WORKING_DIRECTORY
      - run: echo $TEMPLATE_ROOT_DIR
      - run: 
          command: pwd
      # All infrastructure does not cost money so don't need to remove when fail
      # Create networking
      - deploy_stack:
          stack_name: 'EC2'
          template_file: $CIRCLE_WORKING_DIRECTORY/$TEMPLATE_ROOT_DIR/ec2.yml
          parameter_overrides: file://$CIRCLE_WORKING_DIRECTORY/$TEMPLATE_ROOT_DIR/ec2-parameters.json

# Sequential workflow
workflows:
  # Name the workflow
  my_workflow:
    jobs:
      - print_hello_world
      - upload_file
      - download_file:
          requires:
            - upload_file
      - create_infrastructure