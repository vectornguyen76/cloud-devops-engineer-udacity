version: 2.1
# Use a package of configuration called an orb.
orbs:
  aws-cli: circleci/aws-cli@2.0.3
  python: circleci/python@2.1.1
  kubernetes: circleci/kubernetes@1.3.1
  aws-eks: circleci/aws-eks@2.2.0
commands:
  # Reusable Job Code
  export:
    steps: 
      - run:
          name: "Get git commit short-hash for the current"
          command: |
            # Git hash for the current commit
            echo 'export current_commit=<< pipeline.git.revision >>' >> "$BASH_ENV"
            echo 'export CUR_SHORT_HASH="${current_commit:0:7}"' >> "$BASH_ENV"
            # echo 'export CUR_SHORT_HASH="TEST"' >> "$BASH_ENV"
      - run:
          name: "Export environment variable"
          command: |
            echo 'export WORKSPACE_DIR="/home/circleci/workspace"' >> "$BASH_ENV"
            echo 'export PROJECT_ROOT_DIR="capstone-project"' >> "$BASH_ENV"
            echo 'export TEMPLATE_ROOT_DIR=".circleci/files"' >> "$BASH_ENV"
            echo 'export PROJECT_TAG="mlops-capstone-project"' >> "$BASH_ENV"
  
# Define the jobs we want to run for this project
jobs:
  build-test-app:
    executor: 
      name: python/default
      tag: "3.9.17"

    environment:
      # Set the DOCKERHUB_USERNAME environment variable for pushing the image to Docker Hub
      DOCKERHUB_USERNAME: vectornguyen76
      IMAGE_NAME: bentoml_service
      IMAGE_TAG: latest

    steps:
      # This command will pull all of the files into a directory called project which can be found at ~/project.
      - checkout
      # Export environment variable
      - export
      # Set up Docker environment
      - setup_remote_docker

      # Download and cache dependencies
      - restore_cache:
          keys:
          - new-dependencies-{{ checksum "capstone-project/requirements.txt" }}
          # fallback to using the latest cache if no exact match is found
          - dependencies-

      - run:
          name: Install dependencies
          command: |
            cd $(eval echo "$CIRCLE_WORKING_DIRECTORY/$PROJECT_ROOT_DIR")
            python3 -m venv venv
            . venv/bin/activate
            pip install --upgrade pip
            pip install -r requirements.txt

      - save_cache:
          paths:
            - /home/circleci/project/capstone-project/venv
          key: new-dependencies-{{ checksum "capstone-project/requirements.txt" }}

      - run:
          name: Run lint
          command: |
            cd $(eval echo "$CIRCLE_WORKING_DIRECTORY/$PROJECT_ROOT_DIR")
            . venv/bin/activate
            pylint service.py --disable=R,C,W1203,W1202,unsubscriptable-object,no-name-in-module  

      # - run:
      #     name: Convert to bentoml model
      #     command: |
      #       cd $(eval echo "$CIRCLE_WORKING_DIRECTORY/$PROJECT_ROOT_DIR")
      #       . venv/bin/activate
      #       python bentoml_model.py

      # - run:
      #     name: Build BentoML service
      #     command: |
      #       cd $(eval echo "$CIRCLE_WORKING_DIRECTORY/$PROJECT_ROOT_DIR")
      #       . venv/bin/activate
      #       bentoml build

      # - run:
      #     name: Export BentoML service
      #     command: |
      #       cd $(eval echo "$CIRCLE_WORKING_DIRECTORY/$PROJECT_ROOT_DIR")
      #       . venv/bin/activate
      #       bentoml export bentoml_service:latest $CIRCLE_WORKING_DIRECTORY/$PROJECT_ROOT_DIR/bentoml_service

      #       ls $CIRCLE_WORKING_DIRECTORY/$PROJECT_ROOT_DIR/bentoml_service

      - run:
          name: Import and containerize BentoML service
          command: |
            cd $(eval echo "$CIRCLE_WORKING_DIRECTORY/$PROJECT_ROOT_DIR")
            . venv/bin/activate
            bentoml import ./bentoml_service/bentoml_service-oqlrrpbfhkrraaav.bento

            bentoml list

            bentoml containerize bentoml_service:latest

      - run:
          name: Login to Docker Hub
          command: |
            # Log in to Docker Hub
            docker login -u $DOCKERHUB_USERNAME -p $DOCKERHUB_PASSWORD
            
      - run: 
          name: Add tag to image
          command: |
            docker image tag $IMAGE_NAME:oqlrrpbfhkrraaav $DOCKERHUB_USERNAME/$IMAGE_NAME:$IMAGE_TAG

      - run:
          name: Push the image to Docker Hub
          command: |
            docker push $DOCKERHUB_USERNAME/$IMAGE_NAME:$IMAGE_TAG

      # - run:
      #     name: Build app
      #     command: |
      #       cd $(eval echo "$CIRCLE_WORKING_DIRECTORY")

      #       # Compress the data and deployment folder
      #       tar -C capstone-project -czvf artifact-app.tar.gz .

      #       # no error if existing, make parent directories as needed
      #       mkdir --parents $WORKSPACE_DIR

      #       # Move the compressed file to workspace folder
      #       mv artifact-app.tar.gz $WORKSPACE_DIR/artifact-app.tar.gz

      # - persist_to_workspace:
      #     root: /home/circleci/workspace
      #     paths:
      #       - "artifact-app.tar.gz"

  create-cluster-eks:
    docker:
      - image: cimg/python:3.10
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster
        type: string
    steps:
      - checkout
      - kubernetes/install:
          kubectl-version: v1.22.0
      - aws-eks/create-cluster:
          cluster-name: << parameters.cluster-name >>
          zones: "us-east-1a,us-east-1b"
          node-type: "t3.medium"

  test-cluster:
    docker:
      - image: cimg/python:3.10
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster
        type: string
    steps:
      - kubernetes/install:
          kubectl-version: v1.22.0
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: << parameters.cluster-name >>
      - run:
          command: |
            kubectl get services
          name: Test cluster

  create-deployment:
    docker:
      - image: cimg/python:3.10
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster
        type: string
    steps:
      - checkout
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: << parameters.cluster-name >>
          install-kubectl: true
      - kubernetes/create-or-update-resource:
          get-rollout-status: true
          resource-file-path: tests/nginx-deployment/deployment.yaml
          resource-name: deployment/nginx-deployment
          
# Sequential workflow
workflows:
  # Name the workflow
  my_workflow:
    jobs:
      - build-test-app
      - create-cluster-eks:
          cluster-name: eks-mlops-project
          requires:
            - "build-test-app"
          filters:
            branches:
              only:
                - main
      - test-cluster:
          cluster-name: eks-mlops-project
          requires:
            - create-cluster-eks
      - create-deployment:
          cluster-name: eks-mlops-project
          requires:
            - test-cluster
      - aws-eks/update-container-image:
          cluster-name: eks-mlops-project
          container-image-updates: nginx=nginx:1.9.1
          post-steps:
            - kubernetes/delete-resource:
                resource-names: nginx-deployment
                resource-types: deployment
                wait: true
          requires:
            - create-deployment
          resource-name: deployment/nginx-deployment



      - aws-eks/delete-cluster:
          cluster-name: eks-mlops-project
          requires:
            - aws-eks/update-container-image