version: 2.1
# Use a package of configuration called an orb.
orbs:
  aws-cli: circleci/aws-cli@2.0.3
  python: circleci/python@2.1.1
commands:
  # Reusable Job Code
  export:
    steps: 
      - run:
          name: "Get git commit short-hash for the current and the previous commit"
          command: |
            # Git hash for the current commit
            echo 'export current_commit=<< pipeline.git.revision >>' >> "$BASH_ENV"
            echo 'export CUR_SHORT_HASH="${current_commit:0:7}"' >> "$BASH_ENV"
            # echo 'export CUR_SHORT_HASH="TEST"' >> "$BASH_ENV"
      - run:
          name: "Export environment variable"
          command: |
            echo 'export WORKSPACE_DIR="/home/circleci/workspace"' >> "$BASH_ENV"
            echo 'export PROJECT_ROOT_DIR="capstone-project"' >> "$BASH_ENV"
            echo 'export TEMPLATE_ROOT_DIR=".circleci/files"' >> "$BASH_ENV"
            echo 'export PROJECT_TAG="mlops-capstone-project"' >> "$BASH_ENV"

  deploy_stack:
    parameters:
      stack_name:
        type: string
      template_file:
        type: string
      parameter_overrides:
        type: string
    steps:
      - run:
          name: "Deploy << parameters.stack_name >> stack"
          command: |
            aws cloudformation deploy \
            --stack-name << parameters.stack_name >> \
            --template-file << parameters.template_file >> \
            --parameter-overrides << parameters.parameter_overrides >> \
            --no-fail-on-empty-changeset \
            --region us-east-1 \
            --tags Project="mlops-capstone-project" \
            --capabilities "CAPABILITY_IAM" "CAPABILITY_NAMED_IAM"
  destroy_environment:
    parameters:
      stack_name:
        type: string
      bucket_name:
        type: string
        default: ""
      when:
        default: "on_fail"
        type: enum
        enum: ["always", "on_success", "on_fail"]
      aws-access-key-id:
        default: AWS_ACCESS_KEY_ID
        description: >
          AWS access key id for IAM role. Set this to the name of
          the environment variable you will use to hold this
          value, i.e. AWS_ACCESS_KEY.
        type: env_var_name
      aws-region:
        default: AWS_DEFAULT_REGION
        description: >
          Env var of AWS region to operate in
          (defaults to AWS_DEFAULT_REGION)
        type: env_var_name
      aws-secret-access-key:
        default: AWS_SECRET_ACCESS_KEY
        description: >
          AWS secret key for IAM role. Set this to the name of
          the environment variable you will use to hold this
          value, i.e. AWS_SECRET_ACCESS_KEY.
        type: env_var_name
      profile-name:
        default: default
        description: Profile name to be configured.
        type: string
    steps:
      # Set up AWS Credentials when executor != aws cli
      - run:
          name: "Install AWS CLI"
          when: << parameters.when >>
          command: |
            if aws --version | grep "aws-cli/" > /dev/null
            then
              echo "AWS CLI is already installed, skipping installation."
              exit 0
            fi

            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      - run:
          name: "Configure AWS credential"
          environment:
            PARAM_AWS_CLI_ACCESS_KEY_ID: <<parameters.aws-access-key-id>>
            PARAM_AWS_CLI_SECRET_ACCESS_KEY: <<parameters.aws-secret-access-key>>
            PARAM_AWS_CLI_REGION: <<parameters.aws-region>>
            PARAM_AWS_CLI_PROFILE_NAME: <<parameters.profile-name>>
          when: << parameters.when >>
          command: |
            if aws --version | grep "aws-cli/" > /dev/null
            then
              echo "Due to AWS CLI is already installed, skipping configuration AWS credential."
              exit 0
            fi

            PARAM_AWS_CLI_ACCESS_KEY_ID=$(eval echo "\$$PARAM_AWS_CLI_ACCESS_KEY_ID")

            PARAM_AWS_CLI_SECRET_ACCESS_KEY=$(eval echo "\$$PARAM_AWS_CLI_SECRET_ACCESS_KEY")

            PARAM_AWS_CLI_REGION=$(eval echo "\$$PARAM_AWS_CLI_REGION")

            if [ -z "$PARAM_AWS_CLI_ACCESS_KEY_ID" ] || [ -z "${PARAM_AWS_CLI_SECRET_ACCESS_KEY}" ]
            then
              echo "Cannot configure profile. AWS access key id and AWS secret access key must be provided."
              exit 1
            fi

            aws configure set \
              aws_access_key_id "$PARAM_AWS_CLI_ACCESS_KEY_ID" \
              --profile "$PARAM_AWS_CLI_PROFILE_NAME"

            aws configure set \
              aws_secret_access_key "$PARAM_AWS_CLI_SECRET_ACCESS_KEY" \
              --profile "$PARAM_AWS_CLI_PROFILE_NAME"

            aws configure set \
              region "$PARAM_AWS_CLI_REGION" \
              --profile "$PARAM_AWS_CLI_PROFILE_NAME"
      - run:
          name: "Delete << parameters.stack_name >> stack"
          when: << parameters.when >>
          shell: /bin/bash
          command: |
            # Get stack id for the delete_stack waiter
            stack_info=$(aws cloudformation describe-stacks --stack-name << parameters.stack_name >> --query "Stacks[*] | [0].StackId" 2>&1)
            if echo $stack_info | grep 'does not exist' > /dev/null
            then
              echo "Stack does not exist."
              echo $stack_info
              exit 0
            fi
            if echo $stack_info | grep 'ValidationError' > /dev/null
            then
              echo $stack_info
              exit 1
            else
              aws cloudformation delete-stack --stack-name << parameters.stack_name >>
              echo $stack_info
              aws cloudformation wait stack-delete-complete --stack-name $stack_info
              if [ "<< parameters.when >>" = "on_fail" ]
              then
                echo "Roll back completed. Green environment destroyed."
                exit 0
              fi
              echo "Stack << parameters.stack_name >> cleaned up"
              exit 0
            fi
  
# Define the jobs we want to run for this project
jobs:
  build-app:
    executor: 
      name: python/default
      tag: "3.9.17"
    # docker:
    #   - image: circleci/python:3.9.4

    steps:
      # This command will pull all of the files into a directory called project which can be found at ~/project.
      - checkout
      # Export environment variable
      - export

      # Download and cache dependencies
      - restore_cache:
          keys:
          - dependencies-{{ checksum "capstone-project/requirements.txt" }}
          # fallback to using the latest cache if no exact match is found
          - dependencies-

      - run:
          name: Install dependencies
          command: |
            cd $(eval echo "$CIRCLE_WORKING_DIRECTORY/$PROJECT_ROOT_DIR")
            python3 -m venv venv
            . venv/bin/activate
            pip install --upgrade pip
            pip install -r requirements.txt

      - save_cache:
          paths:
            - $CIRCLE_WORKING_DIRECTORY/$PROJECT_ROOT_DIR/venv
          key: dependencies-{{ checksum "capstone-project/requirements.txt" }}

      - run:
          name: Run lint
          command: |
            cd $(eval echo "$CIRCLE_WORKING_DIRECTORY/$PROJECT_ROOT_DIR")
            . venv/bin/activate
            pylint service.py --disable=R,C,W1203,W1202,unsubscriptable-object,no-name-in-module  

      - run:
          name: Convert to bentoml model
          command: |
            cd $(eval echo "$CIRCLE_WORKING_DIRECTORY/$PROJECT_ROOT_DIR")
            . venv/bin/activate
            python bentoml_model.py

      # - run:
      #     name: Build BentoML service
      #     command: |
      #       cd $(eval echo "$CIRCLE_WORKING_DIRECTORY/$PROJECT_ROOT_DIR")
      #       . venv/bin/activate
      #       bentoml build

      # - run:
      #     name: Export BentoML service
      #     command: |
      #       cd $(eval echo "$CIRCLE_WORKING_DIRECTORY/$PROJECT_ROOT_DIR")
      #       . venv/bin/activate
      #       bentoml export bentoml_service:latest $CIRCLE_WORKING_DIRECTORY/$PROJECT_ROOT_DIR/bentoml_service

      #       ls $CIRCLE_WORKING_DIRECTORY/$PROJECT_ROOT_DIR/bentoml_service

      - run:
          name: Import BentoML service
          command: |
            cd $(eval echo "$CIRCLE_WORKING_DIRECTORY/$PROJECT_ROOT_DIR")
            . venv/bin/activate
            bentoml import ./bentoml_service-oqlrrpbfhkrraaav.bento

            bentoml list

            bentoml containerize bentoml_service:latest

      - run:
          name: Build app
          command: |
            cd $(eval echo "$CIRCLE_WORKING_DIRECTORY")

            # Compress the data and deployment folder
            tar -C capstone-project -czvf artifact-app.tar.gz .

            # no error if existing, make parent directories as needed
            mkdir --parents $WORKSPACE_DIR

            # Move the compressed file to workspace folder
            mv artifact-app.tar.gz $WORKSPACE_DIR/artifact-app.tar.gz

      - persist_to_workspace:
          root: /home/circleci/workspace
          paths:
            - "artifact-app.tar.gz"

  build-and-push:
    # Use the Docker orb in the context of this job
    docker:
      - image: docker:17.05.0-ce-git
    environment:
      # Set the DOCKERHUB_USERNAME environment variable for pushing the image to Docker Hub
      DOCKERHUB_USERNAME: vectornguyen76
      IMAGE_NAME: vectornguyen76/model_predictor
      IMAGE_TAG: latest
      MODEL_PROB1_CONFIG_PATH: data/model_config/phase-1/prob-1/model-1.yml  
      MODEL_PROB2_CONFIG_PATH: data/model_config/phase-1/prob-2/model-1.yml
      PORT: 5040
    steps:
      - checkout
      - setup_remote_docker # Configure the Docker CLI
      - run:
          name: Install dependencies
          command: |
            apk add --no-cache py-pip=9.0.0-r1
            pip install docker-compose==1.12.0
      - run:
          name: Build mlflow
          command: |
            # Build the Docker image using the Dockerfile in the current directory
            docker-compose -f deployment/mlflow/docker-compose.yml build
            # docker build -t ${DOCKERHUB_USERNAME}/my-image:${CIRCLE_SHA1} .
      - run:
          name: Build predictor
          command: |
            # Build the Docker image using the Dockerfile in the current directory
            docker build -f deployment/model_predictor/Dockerfile -t $IMAGE_NAME:$IMAGE_TAG .

      - run:
          name: Login to Docker Hub
          command: |
            # Log in to Docker Hub
            docker login -u $DOCKERHUB_USERNAME -p $DOCKERHUB_PASSWORD
      - run:
          name: Push the mlflow to Docker Hub
          command: |
            # Push the image to Docker Hub
            docker-compose -f deployment/mlflow/docker-compose.yml push
      - run:
          name: Push the predictor to Docker Hub
          command: |
            # Push the image to Docker Hub
            docker push $IMAGE_NAME:$IMAGE_TAG

  # Infrastructure Creation
  create-infrastructure: 
    executor: aws-cli/default
    steps:
      # This command will pull all of the files into a directory called project which can be found at ~/project.
      - checkout
      # Export environment variable
      - export
      # Set up AWS Credentials
      - aws-cli/setup
      # All infrastructure does not cost money so don't need to remove when fail
      # Create networking
      - deploy_stack:
          stack_name: EC2-$CUR_SHORT_HASH
          template_file: $CIRCLE_WORKING_DIRECTORY/$TEMPLATE_ROOT_DIR/ec2.yml
          parameter_overrides: file://$CIRCLE_WORKING_DIRECTORY/$TEMPLATE_ROOT_DIR/ec2-parameters.json
      - run:
          name: "Get backend URL"
          command: |
            # no error if existing, make parent directories as needed
            mkdir --parents $WORKSPACE_DIR
            touch $WORKSPACE_DIR/server_public_dns
            # Get name stack
            ec2_public_dns=EC2-$CUR_SHORT_HASH-PublicDNS
            # Pull the export value
            host=$(aws cloudformation list-exports \
            --query "Exports[?Name==\`$ec2_public_dns\`].Value" \
            --no-paginate --output text)
            # Append the DNS to the inventory file
            echo $host >> $(eval echo "$CIRCLE_WORKING_DIRECTORY/.circleci/ansible/inventory.txt")
            # Move to workspace
            mv $(eval echo "$CIRCLE_WORKING_DIRECTORY/.circleci/ansible/inventory.txt $WORKSPACE_DIR/inventory.txt")
            # Setup API_URL for frontend to use
            API_URL="http://${host}:5000"
            echo "${API_URL}"
            # Store in workspace
            echo $API_URL > $WORKSPACE_DIR/server_public_dns
      - persist_to_workspace:
          root: /home/circleci/workspace
          paths:
            - "inventory.txt"
            - "server_public_dns"
      # Rollback if fail
      - destroy_environment:
          stack_name: EC2-$CUR_SHORT_HASH

  deploy-app:
    executor: 
      name: python/default
      tag: "3.11.2"
    steps:
      # This command will pull all of the files into a directory called project which can be found at ~/project.
      - checkout
      # Export environment variable
      - export
      - add_ssh_keys:
          fingerprints: ["61:22:79:6b:8b:79:4e:87:e1:ae:71:57:02:9d:1a:f2"]
      - python/install-packages:
          args: ansible
      - attach_workspace:
          at: /home/circleci/workspace
      - run:
          name: Deploy app
          command: |
            # Move the compressed file to ansible folder
            # no error if existing, make parent directories as needed
            mkdir --parents $(eval echo "$CIRCLE_WORKING_DIRECTORY/.circleci/ansible/roles/deploy/files")
            mv $WORKSPACE_DIR/artifact-app.tar.gz $(eval echo "$CIRCLE_WORKING_DIRECTORY/.circleci/ansible/roles/deploy/files/artifact-app.tar.gz")
      - run:
          name: "Ansible play book for deploy app"
          command: |
            ansible-playbook -i $WORKSPACE_DIR/inventory.txt $(eval echo "$CIRCLE_WORKING_DIRECTORY/.circleci/ansible/deploy-app.yml")
      # Rollback if fail
      - destroy_environment:
          stack_name: EC2-$CUR_SHORT_HASH

# Sequential workflow
workflows:
  # Name the workflow
  my_workflow:
    jobs:
      - build-app
      - build-and-push:
          requires:
            - "build-app"
          filters:
            branches:
              only:
                - main
      - create-infrastructure:
          requires:
            - "build-and-push"
          filters:
            branches:
              only:
                - main
      - deploy-app:
          requires:
            - "create-infrastructure"
          filters:
            branches:
              only:
                - main