AWSTemplateFormatVersion: 2010-09-09
Description: Creates EC2
Parameters:
  VpcCIDR:
    Description: "VPC range"
    Type: String
    Default: ""

  PublicSubnetCIDR:
    Description: "Public subnet CIDR block"
    Type: String
    Default: ""

  InstanceType:
    Type: String
    Description: "EC2 instance type"
    AllowedValues:
      - t2.micro
      - t3.micro
      - t3.medium

  KeyPairName:
    Description: "AWS key pair in us-east-1, stored in SSM Parameter Store"
    Type: String
    Default: "my-keypair"

  AMItoUse:
    Description: AMI to use for our base image - Canonical, Ubuntu, 22.04 LTS, amd64 jammy image build on 2023-05-16
    Type: String
    Default: "ami-053b0d53c279acc90"

Resources: 
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags: 
        - Key: Name
          Value: "Main VPC"

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: Internet Gateway

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: 'us-east-1a'
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnetCIDR
      Tags: 
        - Key: Name
          Value: "Public Subnet AZ1"

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags: 
        - Key: Name
          Value: "Public Route Table"

  SubnetRouteTableAssociationPub:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref PublicRouteTable

  PublicRouteNATGateway:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
        RouteTableId: !Ref PublicRouteTable
        DestinationCidrBlock: '0.0.0.0/0'
        GatewayId: !Ref InternetGateway

  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: mySecurityGroup
      GroupDescription: Allow http to client host
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 5000
          ToPort: 5000
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 3000
          ToPort: 3000
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 5040
          ToPort: 5040
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: "-1"
          FromPort: -1
          ToPort: -1
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: SecurityGroup

# Server EC2 Instance
  ServerInstance: 
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref InstanceType
      ImageId: !Ref AMItoUse
      KeyName: !Ref KeyPairName
      NetworkInterfaces: 
        - AssociatePublicIpAddress: true
          DeviceIndex: "0"
          GroupSet: 
            - !Ref SecurityGroup 
          SubnetId: !Ref PublicSubnet
      BlockDeviceMappings: 
      - DeviceName: "/dev/sdk"
        Ebs: 
          VolumeSize: 20
      # UserData:   
      #   Fn::Base64: !Sub |
      #     #!/bin/bash
      #     sudo apt-get update -y
      #     sudo apt-get install ca-certificates curl gnupg
      #     sudo install -m 0755 -d /etc/apt/keyrings
      #     curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
      #     sudo chmod a+r /etc/apt/keyrings/docker.gpg
      #     echo \
      #     "deb [arch="$(dpkg --print-architecture)" signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \
      #     "$(. /etc/os-release && echo "$VERSION_CODENAME")" stable" | \
      #     sudo tee /etc/apt/sources.list.d/docker.list > /dev/null  
      #     sudo apt-get update -y
      #     apt-get install -y docker-ce
      #     docker run -p 80:8080 tomcat:8.0  
      Tags:
        - Key: Name
          Value: ServerInstance

Outputs:
  EC2InstanceConnection:
    Description: The connection for the EC2 instance
    Value: !Join
      - ""
      - - "ubuntu@"
        - !GetAtt ServerInstance.PublicIp
  EC2InstancePublicDNS:
    Description: The instance public DNS name
    Value: !GetAtt ServerInstance.PublicDnsName
    Export:
      Name: !Join
        - ""
        - - !Ref AWS::StackName
          - "-PublicDNS"